name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        pytest --cov=linkforge --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run ruff lint
      run: |
        ruff check linkforge tests

    - name: Check formatting with ruff
      run: |
        ruff format --check linkforge tests

  type-check:
    name: Type checking
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run mypy
      continue-on-error: true  # Type checking is advisory - 70 errors remain (mostly in Blender integration)
      run: |
        mypy linkforge

  package:
    name: Build extension on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Build extension package
      run: |
        python build_extension.py

    - name: Check package contents (Unix)
      if: runner.os != 'Windows'
      run: |
        cd dist
        unzip -l linkforge-*.zip | head -n 50

    - name: Check package contents (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd dist
        $zipFile = Get-ChildItem -Filter "linkforge-*.zip" | Select-Object -First 1
        Expand-Archive -Path $zipFile.FullName -DestinationPath temp -Force
        Get-ChildItem -Path temp -Recurse | Select-Object -First 50

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: linkforge-extension-${{ matrix.os }}
        path: dist/linkforge-*.zip
        retention-days: 7
