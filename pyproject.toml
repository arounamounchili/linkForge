# Build system configuration (PEP 517/518)
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Project metadata (PEP 621)
[project]
name = "linkforge"
version = "0.4.0"
description = "Professional Blender Extension for exporting robot models to URDF/XACRO for ROS2/Gazebo"
readme = "README.md"
requires-python = ">=3.11"
license = "GPL-3.0-or-later"
authors = [
    {name = "Arouna Patouossa Mounchili", email = "patouossa.mounchili@gmail.com"},
]
keywords = ["blender", "robotics", "urdf", "xacro", "ros", "ros2", "gazebo"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
]

# Runtime dependencies
dependencies = [
    "xacrodoc>=1.3.0",
    "rospkg>=1.5.0",
    "pyyaml>=6.0.0",
    "docutils>=0.18,!=0.21",
]

# Optional dependencies (install with: uv pip install -e ".[dev]")
[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
]

# Project URLs
[project.urls]
Homepage = "https://github.com/arounamounchili/linkforge"
Documentation = "https://github.com/arounamounchili/linkforge"
Repository = "https://github.com/arounamounchili/linkforge"
Issues = "https://github.com/arounamounchili/linkforge/issues"

# Hatchling build configuration (simpler than setuptools)
[tool.hatch.build.targets.wheel]
packages = ["linkforge"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=linkforge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

# Ruff configuration (linting and formatting)
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "N801",    # Blender requires specific class naming (CATEGORY_TYPE_name)
    "SIM102",  # nested if statements - sometimes more readable
    "SIM105",  # contextlib.suppress - explicit try-except is clearer
    "C416",    # list comprehensions - often more readable than list()
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]                 # Allow unused imports
"linkforge/blender/**/*.py" = ["F821"]   # Allow undefined names (bpy)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "bpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bpy_extras.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mathutils"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "linkforge.blender.*"
# Relax type checking for Blender integration code
disallow_untyped_defs = false
disallow_any_generics = false
warn_return_any = false
warn_unused_ignores = false

# Coverage configuration
[tool.coverage.run]
source = ["linkforge"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
